RRR 3-11-16

These are steps that you can add to the taxonomy assignment workflow in order to check 
for mistakes in your custom database.  Some of them are scripts that you run as part of
the taxonomy classification workflow, and others are scripts that you use before the workflow
directly on the files that arb exports.

*** the file names are not consistent yet***

===========================================================================================
I. Pre-workflow scripts (in this folder, copy into a separate working directory to run)
===========================================================================================

1. replace U and . with T and - (perl)
	cat myseqs.fa | prepareARBaligns4tree.pl > mycleanseqs.fa

2. make file semicolon delimited (bash)
	sed 's/[[:blank:]]/\;/' <otus.98.taxonomy >otus.98.taxonomy.reformatted

3. replace blanks with "unclassified" (R)
	Rscript replace_blanks_with_unclassified.R semicolon-delim-input-file output-file

4. return to first column being tab delimited for mothur (bash)
	./replace_first_semicolon_with_tab.sh

===========================================================================================
II. In-workflow scripts (these scripts are part of the workflow, so they are in the tax-scripts
						folder and they require files generated in the workflow. Call these 
						scripts with these different flags from within your workflow working 
						directory and at the correct point in the workflow processing.)
===========================================================================================

1. compare custom and general database names (R)

2. Find typos that result in an two lower-taxa-level orgs of the same name having a different upper name
	find_typos.R

3. Find high-read seqIDs that are missing in the FW database- prioritize adding these sequences
	Find_Abund_SeqIDs_to_Add.R


___________________________________________________________________________________________

===========================================================================================
I. Pre-workflow scripts:
===========================================================================================

___________________________________________________________________________________________

1. replace U and . with T and - (perl)

This script prepareARBaligns4tree.pl is something Trina wrote and has been using for a long time. 
ARB thinks these are RNA sequences so its output uses U instead of T.  Also it has periods 
instead of dashes for gaps. This script just does find and replace:
find: U
replace: T
find: .
replace: -

full command (Type in Terminal)

cat myseqs.fa | prepareARBaligns4tree.pl > mycleanseqs.fa

___________________________________________________________________________________________

2. make file semicolon delimited (bash)

This is necessary to read the file into R in the next step.  R gets very unhappy if there
are multiple column delimiters.  Or rather, I get very unhappy trying to import into R if
there are multiple column delimiters.

full command (type into terminal):

sed 's/[[:blank:]]/\;/' <otus.98.taxonomy >otus.98.taxonomy.reformatted


___________________________________________________________________________________________

3. replace blanks with "unclassified" (R)

The script replace_blanks_with_unclassified.R finds all the blank entries in the database
and instead of leaving it blank calls it "unclassified". These blanks occur when the classification
at a lower level is unknown.  You need to have some word there because otherwise the RDP
classifier doesn't work correctly.  It takes a computational shortcut when calculating bootstrap
p-values where for higher taxonomy levels it simply sums the lower levels.  If the lower level is 
totally blank there's nothing to sum up, so the highest level ends up being less than 100%.

I haven't made this script work from the terminal yet, you have to open it and type in the path.

___________________________________________________________________________________________

4. return to first column being tab delimited for mothur (bash)

mothur requires that mix of tab and semicolon delimited-ness, so now have to change it back.
sed doesn't recognize \t because it's stupid, so have to source a bash script.

full command (type in terminal)

./replace_first_semicolon_with_tab.sh

*** this needs to also add back the semicolon at the end of the line too.  I think I just did 
that in text wrangler before.  pretty sure the # fuck line in the script is a placeholder for that...
***

___________________________________________________________________________________________

===========================================================================================
I. Mid-workflow scripts:
===========================================================================================
___________________________________________________________________________________________

1. Compare general database classification of your custom database representative OTUs to
	identify drift in database curation as they are updated separately.

10.5 compare custom and general databases (mothur, bash)
	mothur "#classify.seqs(fasta=custom.fasta, template=general.fasta, taxonomy=general.taxonomy, method=wang, probs=T, processors=2)"
	cat custom.general.wang.taxonomy > custom.general.taxonomy
	sed 's/[[:blank:]]/\;/' <custom.general.taxonomy >custom.general.taxonomy.reformatted
	mv custom.general.taxonomy.reformatted custom.general.taxonomy
	sed 's/[[:blank:]]/\;/' <custom.taxonomy >custom.custom.taxonomy
	mkdir conflicts_database
	Rscript find_classification_disagreements.R custom.custom.taxonomy custom.general.taxonomy NA conflicts_database NA NA 70 database 
	note, can also add database conflicts to the plot from within RStudio, but took the input out of the plot_classification_disagreements.R terminal call.


*****description*****


___________________________________________________________________________________________

1. workflow step 10.5, 11.5, 12.5, and manual step 13.5



***description***




___________________________________________________________________________________________

2. This uses the R script find_typos.R, which is not ready for terminal call yet.




***description***



___________________________________________________________________________________________

3. Find high-read seqIDs that are missing in the FW database- prioritize adding these sequences

not sourceable from command line yet

***description***















